CMAKE_MINIMUM_REQUIRED(VERSION 3.4)
PROJECT(libpsvm LANGUAGES CXX)

SET(PSVM_COMMON_SOURCE_FILES "src/classifiers.cpp;src/svm.cpp;src/kernels.cpp;src/model_io.cpp")

ADD_LIBRARY(libsvm STATIC ${PSVM_COMMON_SOURCE_FILES} src/sequential_solvers.cpp)
TARGET_INCLUDE_DIRECTORIES(libsvm PUBLIC ${THRUST_INCLUDE_DIRS} PRIVATE include)
SET_TARGET_PROPERTIES(libsvm PROPERTIES PREFIX "" ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Native language support for CUDA
IF(CMAKE_CUDA_COMPILER)
	ADD_LIBRARY(libcusvm STATIC ${PSVM_COMMON_SOURCE_FILES} src/cuda_solvers.cu)
	TARGET_INCLUDE_DIRECTORIES(libcusvm PUBLIC ${THRUST_INCLUDE_DIRS} PRIVATE include)
	SET_TARGET_PROPERTIES(libcusvm PROPERTIES PREFIX "" ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib LINKER_LANGUAGE CUDA CUDA_STANDARD 14 CUDA_SEPARABLE_COMPILATION on)
ENDIF()

# CUDA found through FindCUDA
IF(CUDA_FOUND)
	CUDA_ADD_LIBRARY(libcusvm STATIC ${PSVM_COMMON_SOURCE_FILES} src/cuda_solvers.cu)
	TARGET_INCLUDE_DIRECTORIES(libcusvm PUBLIC ${THRUST_INCLUDE_DIRS} PRIVATE include)
	SET_TARGET_PROPERTIES(libcusvm PROPERTIES PREFIX "" ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
ENDIF()
