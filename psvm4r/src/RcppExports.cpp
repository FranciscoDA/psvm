// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// LinearKernel__new
SEXP LinearKernel__new();
RcppExport SEXP _psvm4r_LinearKernel__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(LinearKernel__new());
    return rcpp_result_gen;
END_RCPP
}
// LinearKernel__get
double LinearKernel__get(SEXP xp, const NumericVector& a, const NumericVector& b);
RcppExport SEXP _psvm4r_LinearKernel__get(SEXP xpSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(LinearKernel__get(xp, a, b));
    return rcpp_result_gen;
END_RCPP
}
// PolynomialKernel__new
SEXP PolynomialKernel__new(double degree, double constant);
RcppExport SEXP _psvm4r_PolynomialKernel__new(SEXP degreeSEXP, SEXP constantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< double >::type constant(constantSEXP);
    rcpp_result_gen = Rcpp::wrap(PolynomialKernel__new(degree, constant));
    return rcpp_result_gen;
END_RCPP
}
// PolynomialKernel__get
double PolynomialKernel__get(SEXP xp, const NumericVector& a, const NumericVector& b);
RcppExport SEXP _psvm4r_PolynomialKernel__get(SEXP xpSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(PolynomialKernel__get(xp, a, b));
    return rcpp_result_gen;
END_RCPP
}
// RbfKernel__new
SEXP RbfKernel__new(double gamma);
RcppExport SEXP _psvm4r_RbfKernel__new(SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(RbfKernel__new(gamma));
    return rcpp_result_gen;
END_RCPP
}
// RbfKernel__get
double RbfKernel__get(SEXP xp, const NumericVector& a, const NumericVector& b);
RcppExport SEXP _psvm4r_RbfKernel__get(SEXP xpSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(RbfKernel__get(xp, a, b));
    return rcpp_result_gen;
END_RCPP
}
// OAALinearKernel__new
SEXP OAALinearKernel__new(int num_classes, int num_dimensions, SEXP xp);
RcppExport SEXP _psvm4r_OAALinearKernel__new(SEXP num_classesSEXP, SEXP num_dimensionsSEXP, SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_classes(num_classesSEXP);
    Rcpp::traits::input_parameter< int >::type num_dimensions(num_dimensionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAALinearKernel__new(num_classes, num_dimensions, xp));
    return rcpp_result_gen;
END_RCPP
}
// OAALinearKernel__train
void OAALinearKernel__train(SEXP xp, const NumericVector& training_attributes, const IntegerVector& training_labels, double C);
RcppExport SEXP _psvm4r_OAALinearKernel__train(SEXP xpSEXP, SEXP training_attributesSEXP, SEXP training_labelsSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type training_attributes(training_attributesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type training_labels(training_labelsSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    OAALinearKernel__train(xp, training_attributes, training_labels, C);
    return R_NilValue;
END_RCPP
}
// OAALinearKernel__predict
SEXP OAALinearKernel__predict(SEXP xp, NumericVector attributes);
RcppExport SEXP _psvm4r_OAALinearKernel__predict(SEXP xpSEXP, SEXP attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type attributes(attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(OAALinearKernel__predict(xp, attributes));
    return rcpp_result_gen;
END_RCPP
}
// OAALinearKernel__num_sv
SEXP OAALinearKernel__num_sv(SEXP xp);
RcppExport SEXP _psvm4r_OAALinearKernel__num_sv(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAALinearKernel__num_sv(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAALinearKernel__num_classes
int OAALinearKernel__num_classes(SEXP xp);
RcppExport SEXP _psvm4r_OAALinearKernel__num_classes(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAALinearKernel__num_classes(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAALinearKernel__num_dimensions
int OAALinearKernel__num_dimensions(SEXP xp);
RcppExport SEXP _psvm4r_OAALinearKernel__num_dimensions(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAALinearKernel__num_dimensions(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAAPolynomialKernel__new
SEXP OAAPolynomialKernel__new(int num_classes, int num_dimensions, SEXP xp);
RcppExport SEXP _psvm4r_OAAPolynomialKernel__new(SEXP num_classesSEXP, SEXP num_dimensionsSEXP, SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_classes(num_classesSEXP);
    Rcpp::traits::input_parameter< int >::type num_dimensions(num_dimensionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAAPolynomialKernel__new(num_classes, num_dimensions, xp));
    return rcpp_result_gen;
END_RCPP
}
// OAAPolynomialKernel__train
void OAAPolynomialKernel__train(SEXP xp, const NumericVector& training_attributes, const IntegerVector& training_labels, double C);
RcppExport SEXP _psvm4r_OAAPolynomialKernel__train(SEXP xpSEXP, SEXP training_attributesSEXP, SEXP training_labelsSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type training_attributes(training_attributesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type training_labels(training_labelsSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    OAAPolynomialKernel__train(xp, training_attributes, training_labels, C);
    return R_NilValue;
END_RCPP
}
// OAAPolynomialKernel__predict
SEXP OAAPolynomialKernel__predict(SEXP xp, NumericVector attributes);
RcppExport SEXP _psvm4r_OAAPolynomialKernel__predict(SEXP xpSEXP, SEXP attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type attributes(attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(OAAPolynomialKernel__predict(xp, attributes));
    return rcpp_result_gen;
END_RCPP
}
// OAAPolynomialKernel__num_sv
SEXP OAAPolynomialKernel__num_sv(SEXP xp);
RcppExport SEXP _psvm4r_OAAPolynomialKernel__num_sv(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAAPolynomialKernel__num_sv(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAAPolynomialKernel__num_classes
int OAAPolynomialKernel__num_classes(SEXP xp);
RcppExport SEXP _psvm4r_OAAPolynomialKernel__num_classes(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAAPolynomialKernel__num_classes(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAAPolynomialKernel__num_dimensions
int OAAPolynomialKernel__num_dimensions(SEXP xp);
RcppExport SEXP _psvm4r_OAAPolynomialKernel__num_dimensions(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAAPolynomialKernel__num_dimensions(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAARbfKernel__new
SEXP OAARbfKernel__new(int num_classes, int num_dimensions, SEXP xp);
RcppExport SEXP _psvm4r_OAARbfKernel__new(SEXP num_classesSEXP, SEXP num_dimensionsSEXP, SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_classes(num_classesSEXP);
    Rcpp::traits::input_parameter< int >::type num_dimensions(num_dimensionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAARbfKernel__new(num_classes, num_dimensions, xp));
    return rcpp_result_gen;
END_RCPP
}
// OAARbfKernel__train
void OAARbfKernel__train(SEXP xp, const NumericVector& training_attributes, const IntegerVector& training_labels, double C);
RcppExport SEXP _psvm4r_OAARbfKernel__train(SEXP xpSEXP, SEXP training_attributesSEXP, SEXP training_labelsSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type training_attributes(training_attributesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type training_labels(training_labelsSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    OAARbfKernel__train(xp, training_attributes, training_labels, C);
    return R_NilValue;
END_RCPP
}
// OAARbfKernel__predict
SEXP OAARbfKernel__predict(SEXP xp, NumericVector attributes);
RcppExport SEXP _psvm4r_OAARbfKernel__predict(SEXP xpSEXP, SEXP attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type attributes(attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(OAARbfKernel__predict(xp, attributes));
    return rcpp_result_gen;
END_RCPP
}
// OAARbfKernel__num_sv
SEXP OAARbfKernel__num_sv(SEXP xp);
RcppExport SEXP _psvm4r_OAARbfKernel__num_sv(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAARbfKernel__num_sv(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAARbfKernel__num_classes
int OAARbfKernel__num_classes(SEXP xp);
RcppExport SEXP _psvm4r_OAARbfKernel__num_classes(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAARbfKernel__num_classes(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAARbfKernel__num_dimensions
int OAARbfKernel__num_dimensions(SEXP xp);
RcppExport SEXP _psvm4r_OAARbfKernel__num_dimensions(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAARbfKernel__num_dimensions(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAOLinearKernel__new
SEXP OAOLinearKernel__new(int num_classes, int num_dimensions, SEXP xp);
RcppExport SEXP _psvm4r_OAOLinearKernel__new(SEXP num_classesSEXP, SEXP num_dimensionsSEXP, SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_classes(num_classesSEXP);
    Rcpp::traits::input_parameter< int >::type num_dimensions(num_dimensionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAOLinearKernel__new(num_classes, num_dimensions, xp));
    return rcpp_result_gen;
END_RCPP
}
// OAOLinearKernel__train
void OAOLinearKernel__train(SEXP xp, const NumericVector& training_attributes, const IntegerVector& training_labels, double C);
RcppExport SEXP _psvm4r_OAOLinearKernel__train(SEXP xpSEXP, SEXP training_attributesSEXP, SEXP training_labelsSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type training_attributes(training_attributesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type training_labels(training_labelsSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    OAOLinearKernel__train(xp, training_attributes, training_labels, C);
    return R_NilValue;
END_RCPP
}
// OAOLinearKernel__predict
SEXP OAOLinearKernel__predict(SEXP xp, const NumericVector& attributes);
RcppExport SEXP _psvm4r_OAOLinearKernel__predict(SEXP xpSEXP, SEXP attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type attributes(attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(OAOLinearKernel__predict(xp, attributes));
    return rcpp_result_gen;
END_RCPP
}
// OAOLinearKernel__num_sv
SEXP OAOLinearKernel__num_sv(SEXP xp);
RcppExport SEXP _psvm4r_OAOLinearKernel__num_sv(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAOLinearKernel__num_sv(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAOLinearKernel__num_classes
int OAOLinearKernel__num_classes(SEXP xp);
RcppExport SEXP _psvm4r_OAOLinearKernel__num_classes(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAOLinearKernel__num_classes(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAOLinearKernel__num_dimensions
int OAOLinearKernel__num_dimensions(SEXP xp);
RcppExport SEXP _psvm4r_OAOLinearKernel__num_dimensions(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAOLinearKernel__num_dimensions(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAOPolynomialKernel__new
SEXP OAOPolynomialKernel__new(int num_classes, int num_dimensions, SEXP xp);
RcppExport SEXP _psvm4r_OAOPolynomialKernel__new(SEXP num_classesSEXP, SEXP num_dimensionsSEXP, SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_classes(num_classesSEXP);
    Rcpp::traits::input_parameter< int >::type num_dimensions(num_dimensionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAOPolynomialKernel__new(num_classes, num_dimensions, xp));
    return rcpp_result_gen;
END_RCPP
}
// OAOPolynomialKernel__train
void OAOPolynomialKernel__train(SEXP xp, const NumericVector& training_attributes, const IntegerVector& training_labels, double C);
RcppExport SEXP _psvm4r_OAOPolynomialKernel__train(SEXP xpSEXP, SEXP training_attributesSEXP, SEXP training_labelsSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type training_attributes(training_attributesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type training_labels(training_labelsSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    OAOPolynomialKernel__train(xp, training_attributes, training_labels, C);
    return R_NilValue;
END_RCPP
}
// OAOPolynomialKernel__predict
SEXP OAOPolynomialKernel__predict(SEXP xp, const NumericVector& attributes);
RcppExport SEXP _psvm4r_OAOPolynomialKernel__predict(SEXP xpSEXP, SEXP attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type attributes(attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(OAOPolynomialKernel__predict(xp, attributes));
    return rcpp_result_gen;
END_RCPP
}
// OAOPolynomialKernel__num_sv
SEXP OAOPolynomialKernel__num_sv(SEXP xp);
RcppExport SEXP _psvm4r_OAOPolynomialKernel__num_sv(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAOPolynomialKernel__num_sv(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAOPolynomialKernel__num_classes
int OAOPolynomialKernel__num_classes(SEXP xp);
RcppExport SEXP _psvm4r_OAOPolynomialKernel__num_classes(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAOPolynomialKernel__num_classes(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAOPolynomialKernel__num_dimensions
int OAOPolynomialKernel__num_dimensions(SEXP xp);
RcppExport SEXP _psvm4r_OAOPolynomialKernel__num_dimensions(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAOPolynomialKernel__num_dimensions(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAORbfKernel__new
SEXP OAORbfKernel__new(int num_classes, int num_dimensions, SEXP xp);
RcppExport SEXP _psvm4r_OAORbfKernel__new(SEXP num_classesSEXP, SEXP num_dimensionsSEXP, SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_classes(num_classesSEXP);
    Rcpp::traits::input_parameter< int >::type num_dimensions(num_dimensionsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAORbfKernel__new(num_classes, num_dimensions, xp));
    return rcpp_result_gen;
END_RCPP
}
// OAORbfKernel__train
void OAORbfKernel__train(SEXP xp, const NumericVector& training_attributes, const IntegerVector& training_labels, double C);
RcppExport SEXP _psvm4r_OAORbfKernel__train(SEXP xpSEXP, SEXP training_attributesSEXP, SEXP training_labelsSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type training_attributes(training_attributesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type training_labels(training_labelsSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    OAORbfKernel__train(xp, training_attributes, training_labels, C);
    return R_NilValue;
END_RCPP
}
// OAORbfKernel__predict
SEXP OAORbfKernel__predict(SEXP xp, const NumericVector& attributes);
RcppExport SEXP _psvm4r_OAORbfKernel__predict(SEXP xpSEXP, SEXP attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type attributes(attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(OAORbfKernel__predict(xp, attributes));
    return rcpp_result_gen;
END_RCPP
}
// OAORbfKernel__num_sv
SEXP OAORbfKernel__num_sv(SEXP xp);
RcppExport SEXP _psvm4r_OAORbfKernel__num_sv(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAORbfKernel__num_sv(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAORbfKernel__num_classes
int OAORbfKernel__num_classes(SEXP xp);
RcppExport SEXP _psvm4r_OAORbfKernel__num_classes(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAORbfKernel__num_classes(xp));
    return rcpp_result_gen;
END_RCPP
}
// OAORbfKernel__num_dimensions
int OAORbfKernel__num_dimensions(SEXP xp);
RcppExport SEXP _psvm4r_OAORbfKernel__num_dimensions(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(OAORbfKernel__num_dimensions(xp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_psvm4r_LinearKernel__new", (DL_FUNC) &_psvm4r_LinearKernel__new, 0},
    {"_psvm4r_LinearKernel__get", (DL_FUNC) &_psvm4r_LinearKernel__get, 3},
    {"_psvm4r_PolynomialKernel__new", (DL_FUNC) &_psvm4r_PolynomialKernel__new, 2},
    {"_psvm4r_PolynomialKernel__get", (DL_FUNC) &_psvm4r_PolynomialKernel__get, 3},
    {"_psvm4r_RbfKernel__new", (DL_FUNC) &_psvm4r_RbfKernel__new, 1},
    {"_psvm4r_RbfKernel__get", (DL_FUNC) &_psvm4r_RbfKernel__get, 3},
    {"_psvm4r_OAALinearKernel__new", (DL_FUNC) &_psvm4r_OAALinearKernel__new, 3},
    {"_psvm4r_OAALinearKernel__train", (DL_FUNC) &_psvm4r_OAALinearKernel__train, 4},
    {"_psvm4r_OAALinearKernel__predict", (DL_FUNC) &_psvm4r_OAALinearKernel__predict, 2},
    {"_psvm4r_OAALinearKernel__num_sv", (DL_FUNC) &_psvm4r_OAALinearKernel__num_sv, 1},
    {"_psvm4r_OAALinearKernel__num_classes", (DL_FUNC) &_psvm4r_OAALinearKernel__num_classes, 1},
    {"_psvm4r_OAALinearKernel__num_dimensions", (DL_FUNC) &_psvm4r_OAALinearKernel__num_dimensions, 1},
    {"_psvm4r_OAAPolynomialKernel__new", (DL_FUNC) &_psvm4r_OAAPolynomialKernel__new, 3},
    {"_psvm4r_OAAPolynomialKernel__train", (DL_FUNC) &_psvm4r_OAAPolynomialKernel__train, 4},
    {"_psvm4r_OAAPolynomialKernel__predict", (DL_FUNC) &_psvm4r_OAAPolynomialKernel__predict, 2},
    {"_psvm4r_OAAPolynomialKernel__num_sv", (DL_FUNC) &_psvm4r_OAAPolynomialKernel__num_sv, 1},
    {"_psvm4r_OAAPolynomialKernel__num_classes", (DL_FUNC) &_psvm4r_OAAPolynomialKernel__num_classes, 1},
    {"_psvm4r_OAAPolynomialKernel__num_dimensions", (DL_FUNC) &_psvm4r_OAAPolynomialKernel__num_dimensions, 1},
    {"_psvm4r_OAARbfKernel__new", (DL_FUNC) &_psvm4r_OAARbfKernel__new, 3},
    {"_psvm4r_OAARbfKernel__train", (DL_FUNC) &_psvm4r_OAARbfKernel__train, 4},
    {"_psvm4r_OAARbfKernel__predict", (DL_FUNC) &_psvm4r_OAARbfKernel__predict, 2},
    {"_psvm4r_OAARbfKernel__num_sv", (DL_FUNC) &_psvm4r_OAARbfKernel__num_sv, 1},
    {"_psvm4r_OAARbfKernel__num_classes", (DL_FUNC) &_psvm4r_OAARbfKernel__num_classes, 1},
    {"_psvm4r_OAARbfKernel__num_dimensions", (DL_FUNC) &_psvm4r_OAARbfKernel__num_dimensions, 1},
    {"_psvm4r_OAOLinearKernel__new", (DL_FUNC) &_psvm4r_OAOLinearKernel__new, 3},
    {"_psvm4r_OAOLinearKernel__train", (DL_FUNC) &_psvm4r_OAOLinearKernel__train, 4},
    {"_psvm4r_OAOLinearKernel__predict", (DL_FUNC) &_psvm4r_OAOLinearKernel__predict, 2},
    {"_psvm4r_OAOLinearKernel__num_sv", (DL_FUNC) &_psvm4r_OAOLinearKernel__num_sv, 1},
    {"_psvm4r_OAOLinearKernel__num_classes", (DL_FUNC) &_psvm4r_OAOLinearKernel__num_classes, 1},
    {"_psvm4r_OAOLinearKernel__num_dimensions", (DL_FUNC) &_psvm4r_OAOLinearKernel__num_dimensions, 1},
    {"_psvm4r_OAOPolynomialKernel__new", (DL_FUNC) &_psvm4r_OAOPolynomialKernel__new, 3},
    {"_psvm4r_OAOPolynomialKernel__train", (DL_FUNC) &_psvm4r_OAOPolynomialKernel__train, 4},
    {"_psvm4r_OAOPolynomialKernel__predict", (DL_FUNC) &_psvm4r_OAOPolynomialKernel__predict, 2},
    {"_psvm4r_OAOPolynomialKernel__num_sv", (DL_FUNC) &_psvm4r_OAOPolynomialKernel__num_sv, 1},
    {"_psvm4r_OAOPolynomialKernel__num_classes", (DL_FUNC) &_psvm4r_OAOPolynomialKernel__num_classes, 1},
    {"_psvm4r_OAOPolynomialKernel__num_dimensions", (DL_FUNC) &_psvm4r_OAOPolynomialKernel__num_dimensions, 1},
    {"_psvm4r_OAORbfKernel__new", (DL_FUNC) &_psvm4r_OAORbfKernel__new, 3},
    {"_psvm4r_OAORbfKernel__train", (DL_FUNC) &_psvm4r_OAORbfKernel__train, 4},
    {"_psvm4r_OAORbfKernel__predict", (DL_FUNC) &_psvm4r_OAORbfKernel__predict, 2},
    {"_psvm4r_OAORbfKernel__num_sv", (DL_FUNC) &_psvm4r_OAORbfKernel__num_sv, 1},
    {"_psvm4r_OAORbfKernel__num_classes", (DL_FUNC) &_psvm4r_OAORbfKernel__num_classes, 1},
    {"_psvm4r_OAORbfKernel__num_dimensions", (DL_FUNC) &_psvm4r_OAORbfKernel__num_dimensions, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_psvm4r(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
